[h]DREYMAR'S (USB++): DreymaR's Extensive Yet Modular ARSenal – for QUICKIE USB-2-USB & other TMK devices[/h]

    [img]https://www.dropbox.com/s/e21hymd7xpkrbli/TarmakCurl-5_ETROI_Spect.png?raw=1[/img]


There is a [b][url=https://forum.colemak.com/topic/2315-dreymars-big-bag-of-keyboard-tricks-main-topic/]Big Bag of Keyboard Tricks Main Topic[/url][/b], in which I go into detail on what the different tricks are.

I also have topics focusing on different implementations of the Big Bag Of Keyboard Tricks:
• The [b][url=https://forum.colemak.com/viewtopic.php?id=1438]Big Bag (XKB) for Linux[/url][/b]
• The [b][url=https://forum.colemak.com/viewtopic.php?id=1467]Big Bag (PKL) for Windows[/url][/b]
• The [b][url=https://forum.colemak.com/viewtopic.php?id=2158]Big Bag (TMK) for USB-2-USB remapping "QUICKIE" devices[/url][/b] [b]– you are here![/b]
• The [b][url=https://forum.colemak.com/viewtopic.php?id=2020]Big Bag (Mac) for Karabinier[/url][/b] by [user]mkborregaard[/user]


[h]DREYMAR'S BIG BAG OF TRICKS for QUICKIE USB-2-USB devices[/h]

[i]WARNING - Some Assembly May Be Required (if you want a specific locale/ergo variant for instance)[/i]

[b][1]    [u]Character/Key Mapping Layers[/u][/b]
[b][1.1][/b] (My [b][url=https://forum.colemak.com/viewtopic.php?id=1280]Colemak[eD][/url] AltGr mappings[/b])
[b][1.2][/b] [b][url=https://forum.colemak.com/viewtopic.php?id=2014]Extend layers[/url][/b] using Caps Lock (and Tab) as switch modifier(s) for navigation/editing/browsing/etc from near the home position

[b][2]    [u]Ergonomic Key Remappings[/u][/b]
[b][2.1][/b] [b]Angle/Wide ergo modifications[/b] to improve wrist angles, hand spacing and right pinky stretch/load effort
[b][2.2][/b] [b]Colemak-DH[/b] ergo mod (deprioritize middle columns without keys changing fingers)

[b][3]    [u]Other Layouts[/u][/b]
[b][3.1][/b] [b][url=https://forum.colemak.com/viewtopic.php?id=1858]Tarmak[/url] transitional Colemak[/b] layouts for learning Colemak in smaller steps if so desired
[b][3.2][/b] ([b][url=https://forum.colemak.com/viewtopic.php?id=1458]Locale[/url][/b] and phonetic layout variants)
[b][3.3][/b] [b]Mirrored Colemak[/b] that allows one-handed typing without extra learning

[b][4]    [u]Download and Setup[/u][/b]
[b][4.1][/b] [b][url=https://forum.colemak.com/post/18407/#p18407]Download and Install[/url][/b]
[b][4.2][/b] [b][url=https://forum.colemak.com/post/18410/#p18410]Keymap Configuration[/url][/b]
[b][4.3][/b] [b][url=https://forum.colemak.com/post/18411/#p18411]Device Flashing[/url][/b]
[b][4.4][/b] [b]Hardware Implementations[/b]

[b][–.–][/b] [b]Links/Done/Todo[/b]


This post explains what a [b]QUICKIE USB-2-USB device[/b] is, and what I've managed to implement on [b][url=https://geekhack.org/index.php?topic=69169.0]Hasu's USB to USB keyboard converter[/url][/b] using his [b][url=https://github.com/tmk/tmk_keyboard]TMK Keyboard Firmware Collection[/url][/b] toolkit. If you're eager to get started before reading the details, you may jump directly to the [b][url=https://forum.colemak.com/post/18407/#p18407]Download and Install[/url][/b], [b][url=https://forum.colemak.com/post/18410/#p18410]Keymap Configuration[/url][/b] and [b][url=https://forum.colemak.com/post/18411/#p18411]Device Flashing[/url][/b] posts below.

    [img]https://www.dropbox.com/s/evcoirw5kpmji4d/USB2USB-x3_YangDigi_GeekHack-Topic80421_GadOE.jpg?raw=1[/img]
    [i][url=https://geekhack.org/index.php?topic=80421]GeekHack user yangdigi[/url]'s comparison of USB-2-USB devices: Arduino Leonardo-type, Hasu's device and his own Pro Micro device.
    Scale: Hasu's device is about 6 cm (2") long.[/i]

Look at those beauties, heh. I've decided to call this kind of device a [b]QUICKIE[/b] (QWERTY USB In, Colemak Key Input Emulated)! ;-) More proper names are "[b]USB-2-USB[/b]" or "[b]USB to USB converter[/b]" device, as you may of course use it for non-Colemak layouts (and as my name is silly).

This non-OS-specific solution doesn't have the full power of layout installs, but it's very interesting. A USB-to-USB device that plugs between the keyboard and whatever you're connecting your keyboard to, provides an XKB/Win/Mac/what-have-you independent solution that can accommodate many of my tricks! For people having to deal with zealous IT security rules, this may be the only solution short of getting an expensive remappable keyboard. It could let you type Colemak+Extend to, say, a PlayStation or other device where you can't control the layout directly. It could let you pair code using Colemak+Extend while your mate uses QWERTY (poor thing!) on the same computer. And it could be fun to make one yourself if you're adventurous and DIY oriented!

The common solution is a microcontroller (such as Atmel's AtMega32 chips; Arduino Teensy 2+ or Pro Micro are good choices) with USB, coupled with a USB Host "shield" (separate little PCB) that lets you plug your keyboard into it. It'll mount itself as a HID keyboard, that is, a run-of-the-mill USB keyboard that almost any device accepts.

There are other options, too: You could have a [b][url=https://geekhack.org/index.php?topic=14618.0]PS/2-USB converter[/url][/b] instead, or various [b][url=https://geekhack.org/index.php?topic=72052.0]keyboard controllers[/url][/b] attached to or built into the keyboard itself! Most of these can use the same "Unimap" layout code, so if you're interested in one of those variants then check it out.

There are several possible ways of programming a USB-2-USB device. Essentially you have to:
[b]1)[/b] Connect the device in [b]Bootloader[/b] mode which means it can be programmed
[b]2)[/b] Get some code and compile it for the device, or use a pre-compiled [b]HEX[/b] file. There's even an online layout designer for a less techy option.
[b]3)[/b] [b]Flash[/b] the .hex file to the device's static memory
[b]4)[/b] [b]Reset[/b] the device (or just unplug and replug it) to reactivate application mode so it works

An advantage of my TMK-based implementation is that you can pick and choose most of the enhancements as modules:
• The AngleWide mods are keymap types so they work with any layout you choose, including QWERTY or Dvorak
• The Extend layers and switch keys are options that should work with nearly any existing layout
• The Curl(DH) mod for Colemak layouts uses a separate switch (together with CurlAngle keymaps)
• Mirrored Colemak and Tarmak (transitional Colemak) are separate layouts.
Freedom of choice through [b]modularity[/b] is an ideal in the DreymaR world, as it is in Linux. :-)


[h][1]    [u]Character/Key Mapping Layers[/u][/h]
[s][h][1.1]    COLEMAK[eD] - EDITION DREYMAR[/h][/s]

A USB-2-USB device remaps only key strokes, not character input events. So key mods like layout and ergo remappings are possible, but not mods that send glyphs. Your dead keys and AltGr mappings will work as they do without the device, and you may only move their keys around as they are.

Sorry, but AltGr/DeadKey glyph mappings such as the powerful Colemak[eD] below are for the most part up to the active layout on the machine you're typing to.

In all honesty though, [url=https://github.com/tmk/tmk_keyboard/wiki/FAQ-Keymap]it is possible to send Unicode[/url] with methods such as Windows' Alt+NumPad(####) defined for instance as TMK macros. But since it's platform dependent, memory consuming and clunky, I couldn't do this to create the full Colemak[eD]. Dead key tables and functions would've been even more byte-gobbling, so no.

However, I have made a user function that lets you define a few keys as four-level giving OS specific Unicode input using the RAlt key as AltGr for these keys only. I used this to get the Norwegian special letters åæø and their shifted counterparts (on the bracket and ISO LSGT keys) as in Colemak[eD], and it works fine for me. I even added the bullet and dagger glyphs (on the ISO \| key) for good measure. You can find various lists of alt codes to use, such as [url=https://fsymbols.com/keyboard/windows/alt-codes/list/]this one[/url]. Remember that you need to use "KC_P#" where # is the digit. For Mac or Unix you need to change the method, see the unimap_dreymar.c file and ask me if you need help.

    [img]https://www.dropbox.com/s/bqq3u03canj7i9n/Cmk-ISO-eD-CurlAWide_96d-FShui.png?raw=1[/img]
    [i]Fig.: Colemak-CAW[eD], showing an ISO board with the Curl(DH)Angle and Wide ergonomic mods (see below).[/i]


[h][1.2]    EXTEND LAYERS AND THE CAPS SWITCH MODIFIER[/h]

This is my favorite mod next to Colemak itself! The ability to navigate and edit from the home position and its immediate surroundings is extremely powerful. It's like having part of the power of advanced editors like Vim ready in all situations. Plus a fully functional multimedia keyboard without sacrificing compactness.

    [img]https://www.dropbox.com/s/4rnnya9te27p3do/Extend-ISO-NoWi-Linux_90d.png?raw=1[/img]
    [i]A symbolic chart of my Extend mappings (lvl1 only). Greens, navigation; blue/circled, mousing; orange, multimedia; gray, system/misc.[/i]

The USB-2-USB implementation is almost the same as the Linux/XKB and Windows/PKL ones. Some advanced media key codes such as Brightness controls are missing for now (as their key codes aren't in TMK). How some of the advanced keys like MouseWheel Left/Right are interpreted is still up to the OS.

[code]
    DreymaR's Extend1 layer:
 * ,----.    ,-------------------. ,-------------------. ,-------------------.
 * |Caps|    |MPly|MPrv|MNxt|MStp| |Mute|VolD|VolU|MSel| |WHom|WSch|MyCm|Calc|
 * `----'    `-------------------' `-------------------' `-------------------'
 * ,-------------------------------------------------------------------------.
 * | ?? | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10| F11| F12|  Pause |
 * |-------------------------------------------------------------------------|
 * |      |Esc |Wh_U|WBak|WFwd|Ms_U|PgUp|Home| Up |End |Del |Esc |Ins |  App |
 * |-------------------------------------------------------------------------|
 * |*Ext1* |Alt |Wh_D|Shft|Ctrl|Ms_D|PgDn|Left|Down|Rght|BSpc|App |WFav|PScr |
 * |-------------------------------------------------------------------------|
 * |     |Wh_L| ^Z | ^X | ^C | ^V |Btn1|Btn2|Btn3|Ms_L|Ms_R|Wh_R|            |
 * |-------------------------------------------------------------------------|
 * |      |     |Ext1 |           Return            |     |     |     |      |
 * `-------------------------------------------------------------------------' 
[/code]
[code]
    DreymaR's Extend2 layer:
 * ,----.    ,-------------------. ,-------------------. ,-------------------.
 * |    |    |MPau|MRwd|MFFd|Ejct| |WRef|BriD|BriU|Slep| |www |Mail|App3|App4|
 * `----'    `-------------------' `-------------------' `-------------------'
 * ,-------------------------------------------------------------------------.
 * | ?? | !  | @  | #  | $  | %  | ^  | P7 | P8 | P9 | P* | P- | =  |        |
 * |-------------------------------------------------------------------------|
 * |      |Home| Up |End |Del |Esc |PgUp| P4 | P5 | P6 | P+ | (  | )  |      |
 * |-------------------------------------------------------------------------|
 * |*Ext2* |Left|Down|Rght|BSpc|NLck|PgDn| P1 | P2 | P3 |PEnt| '  | ,  |     |
 * |-------------------------------------------------------------------------|
 * |     |    | ^Z | ^X | ^C | ^V |Btn1| :  | P0 | P0 | P. | P/ |            |
 * |-------------------------------------------------------------------------|
 * |      |     |     |                             |Ext2 |     |     |      |
 * `-------------------------------------------------------------------------' 
[/code]

To use the Extend layers, define the CAPSBEHAVIOR constant to 1. This'll make CapsLock the Extend modifier. You may change it to another key by editing the active layout or keymap; see the [b][url=https://forum.colemak.com/post/18410/#p18410]Configuration[/url][/b] post below.

There's a couple of EXT#BIT constants that determine how Extend2 is selected: If EXT2BIT is defined as MOD_BIT(KC_RSFT) for instance, holding Right Shift down while pressing the Extend key will activate Extend2. Holding down Extend alone will maintain that layer. The EXT3BIT and the combination of the two could select Extend3 and Extend4, but I haven't yet implemented these layers as I haven't yet decided on what to put in them. You could add your own if you want to – ask me how.

For the NumPad layer, remember that the NumLock state influences what you get. There's a NumLock key easily accessible in the layer.

[b]NOTE: Superstacking Extend modifiers[/b] doesn't always work for me. Instead of Ctrl+Shift+Left, pressing Caps+S+T+N gave me ST key strokes. Oddly enough, it works with either Phys-Shift + Extend-Ctrl as well as Phys-RCtrl + Extend-Shift (Shift+Caps+T+N or RCtrl+Caps+S+N work) but not with physical LCtrl. This leads me to believe that the limitation is my keyboards' scan matrix, but it happened on all my boards. Other users didn't have this problem...?


[h][2]    [u]Ergonomic Key Remappings[/u][/h]
[h][2.1]    THE ANGLE/WIDE ERGONOMIC KEYBOARD MODEL MODS[/h]

These are ergonomic mods, moving some keys around to achieve straight wrists (the Angle mods), as well as better hand separation and right pinky load (the Wide mods). The Angle part is almost a no-brainer to me as it allows the left hand to keep a straight wrist without changing the fingering on ZXCV, and makes B easier to reach. [url=https://forum.colemak.com/profile.php?id=2]Shai Coleman[/url] himself has given his "blessing" to this mod! The Wide mod is more optional, but it does put some load off the right-hand pinky, widen the arm distance (useful for small keyboards in particular, but nice regardless), and provide easier access to AltGr/Enter/Backspace/RShift.

    [img]https://www.dropbox.com/s/uiy9n0ktq7lhiip/Cmk-ISO-AWide-35_60d_FShui.png?raw=1[/img]
    [i]The AngleWide(Slash) ergo mod for ISO keyboards.[/i]

I've implemented the ZXCVB_ 'Angle' shift for ISO keyboards both separately and as part of the AngleWide(Slash) mod that I use myself. For ANSI boards I've made an implementation of the 'Angle(Z)' shift (moving the Z key to the middle) and a [url=https://forum.colemak.com/viewtopic.php?pid=12302#p12302]Wide(Quote) mod[/url] as well as the combination of these. Also the 'A-Wing' mod to get the Angle and right pinky benefits without messing with the Z position (but at other costs).

     [img]https://www.dropbox.com/s/36j55kaeu30wxui/Cmk-ANSI-AWide-ZQu_60d_FShui.png?raw=1[/img]
     [i]The Angle(Z)Wide ergo mod for US/ANSI keyboards[/i]

Colemak-DH requires by default a special Angle(Wide) variant in which the V is kept in its original position so that only ZXC and B move; B then gets remapped to D by the mod itself. See below.

To use one of these, define the Unimap layout constant in my keymap (.c) file:
[code]
* Edit '_########' in the UNIMAPLAYOUT definiton below to choose ergonomic Curl/Angle/Wide keyboard mods:
 * _UNMODDED - Standard Unimap format for all keyboard and converter types (w/o F13-24; this one is without ergo mods)
 * _ANIZXCVB (w/ Curl-DH: _ANIZXCBV) - ISO/Int Angle (the simple lower left half-row shift)
 * _AWIZXCVB (w/ Curl-DH: _AWIZXCBV) - ISO/Int Angle-Wide(/)
 * _ANAXCVBZ (w/ Curl-DH: _ANAXCBVZ) - ANSI/US Angle(Z)
 * _AWAXCVBZ (w/ Curl-DH: _AWAXCBVZ) - ANSI/US Angle(Z)-Wide(')
 * _ANAAWING (   Curl-DH:  N/A     ) - ANSI/US A-Wing
 *
 * Select a Curl(DH) or non-Curl ergo model, or plain unmodded Unimap. For Curl(DH), you also need to set CURLMOD.
[/code]

The actual keymap types are defined in the header (.h) file as compiler macros and those are a bit harder to edit manually.


[h][2.2]    THE COLEMAK-DH ALIAS "CURL(DH)" ERGO MOD[/h]

The [b][url=https://colemakmods.github.io/mod-dh/]Colemak-DH[/url][/b] ergo mod makes the home "row" curl like a relaxed hand does instead of forcing it to a straight line as was commonly thought best some years ago. This is achieved by moving the common D and H from their debated "middle trench" positions to the more comfortable lower-row V/M positions, while preserving the key-to-finger mappings of vanilla Colemak.

    [img]https://www.dropbox.com/s/yk6trpvr2w5tdp8/Cmk-ISO-CurlAWide_90d_FShui.png?raw=1[/img]
    [i]The Colemak Curl(DH)AngleWide, a.k.a. Colemak-CAW, ergo modded layout.[/i]

The old "DHm" (DvbgHm) variant which doesn't move K from its Colemak position, may be better for non-staggered matrix boards, but it's debated. If you switch between staggered and non-staggered boards you'll probably want to use the standard Colemak-DH consistently.

This mod depends on using a CurlAngle ergo mod which is easier on an "102/105-key" ISO keyboard but as seen above there are decent options for US/ANSI boards too.

To use Colemak-DH with my TMK files, there's a preprocessor switch named CURLMOD:
[code]
   The CURLMOD options for Colemak/Tarmak layouts are:
 * 0: No Curl - vanilla Colemak/Tarmak
 * 1: The Colemak-DH ergo mod, bringing the D and H keys down to comfortable bottom-row positions (QWERTY C/M)
 * 2: SteveP99's old Curl(DHm) ergo mod, bringing D/H down but M to the home row.
...
#define CURLMOD 1
[/code]

This switch only affects Colemak layouts, including the four Tarmak layouts and Mirrored Colemak. Make sure you use a CurlAngle or CurlAngleWide keymap type such as [i]UNIMAP_AWIZXCBV[/i] with it (optional for Tarmak1).


[h][3]    [u]Other Layouts[/u][/h]
[h][3.1]    THE TARMAK TRANSITIONAL COLEMAK LAYOUTS[/h]

There's [url=https://forum.colemak.com/viewtopic.php?id=1858]a main forum topic on this[/url] that you may want to read. Basically, I've added four Tarmak layouts that provide stepping stones from the standard (US) English QWERTY layout to the Colemak[eD] layout by moving only 3-4 keys per step. Each step brings at least one important key to the home row (notably, E-T-R-O-I) and only the uncommon J is misplaced in the process.

    [img]https://www.dropbox.com/s/gi1rh06u7ksdas3/Tarmak_Spectral_ETROI.png?raw=1[/img]
    [i]The 5-step Tarmak(ETROI) transitional Colemak layouts, spectrally color-coded from red (Tarmak1) to violet (Colemak).[/i]

The Tarmak progressions work modularly with the AngleWide ergo mods.

If you want to learn the brilliant Colemak-DH variant using a Tarmak progression, that's possible too! You just have to learn a CurlAngle mod before or with the 2nd Tarmak step which also gets tweaked a little so it moves B instead of G. The right-hand swaps (Hmk) should ideally be learnt in conjunction with Tarmak1-Curl because that moves K, but for SteveP's old variant I've deferred the HM swap to the last step. It could go wherever you like as it's separate, so feel free to edit the layout file if you desire.

[code]
     * Tarmak2 - Transitional Colemak (ET)
     * ,-----------------------------------------------------------.
     * |     |  q|  w|  F|  r|  G|  y|  u|  i|  o|  p|   |   |     |
     * |-----------------------------------------------------------|
     * |      |  a|  s|  d|  T| *J|  h|  N|  E|  l|  ;|   |        |
     * |-----------------------------------------------------------|
     * |        |  z|  x|  c|  v|  b|  K|  m|   |   |   |          |
     * `-----------------------------------------------------------'     

     * Tarmak2-Curl(DH) - Transitional Colemak-Curl-DH (ET)
     * ,-----------------------------------------------------------.
     * |     |  q|  w|  F|  r|  B|  y|  u|  i|  o|  p|   |   |     |
     * |-----------------------------------------------------------|
     * |      |  a|  s|  d|  T|  g|  K|  N|  E|  l|  ;|   |        |
     * |-----------------------------------------------------------|
     * |    |  z|  x|  c| *J|  v|  _|  M|  H|   |   |   |          |
     * `-----------------------------------------------------------'    
[/code]


[h][3.2]    LOCALE AND PHONETIC VARIANTS[/h]

The QUICKIE only partially supports locales [i]per se[/i], as it only sends key strokes that are then re-coded by your computer's layout settings. My four-level Unicode function remedies this somewhat by allowing some keys to have their AltGr/RAlt states remapped to an OS dependent Unicode input method. So I can set a standard US QWERTY layout on my computer and still have, e.g., the locale ÆæØøÅå letters where I'm used to.

Before I made that function however, I used the locale layout installed on Windows. But I found that the default symbol key mappings are non-intuitive since they are quite different from the US ones which I'm used to now. So I've made a "hack" layout for myself that moves several symbol keys to where I feel they are better placed for me.

For instance, instead of a [=+] key as on US keyboards, the Norwegian locale has [+?], [0=] etc. I can't sort that out to get the symbol placements I'm used to as a Colemak[eD] typist unless I choose a US locale layout on the computer I'm on – but I still need the Norwegian ÆØÅ letters so that won't work! I had to settle for, e.g., moving the +? key to the US /? key position so at least the question mark is in the right place. Not perfect, but the best I could do.

Phonetic layouts for non-latin scripts require a layout with that script installed on the computer or whatever you're typing to. If you select a QWERTY phonetic layout for a script and have a USB-2-USB Colemak keymap active, your resulting layout will be Colemak phonetic. If, however, you want to swap some key positions (for Rulemak/Bulmak for instance), a suitable new keymap must be made and compiled.


[h][3.3]    MIRRORED COLEMAK[/h]

Advanced typing with only one hand is possible given a modicum of familiarity with the mirroring method. In fact, this paragraph was written entirely using the left hand with the exception of the mirroring key itself, with hardly any training! The brain is inherently good at mirroring things.

Mirrored layouts are easily implementable for the USB-2-USB device. I've provided a mirrored Colemak that obeys the Curl mod setting. This will usually be your second layout (layer 1) on top of Colemak, so in my map file it's set by using ACTIVELAYOUT 5 (Colemak) and SECONDLAYOUT 6 (mirrored Colemak).

If you want a non-Colemak mirrored layout, you're on your own writing one. If you do, please post it below so others can benefit! I haven't yet 

[code]
       Mirrored Colemak (used as switch layout for one-handed typing)
     * ,---.   ,---------------. ,---------------. ,---------------.
     * |  \|   |F12|F11|F10|F9 | |F8 |F7 |F6 |F5 | |F4 |F3 |F2 |F1 |
     * `---'   `---------------' `---------------' `---------------'
     * ,-----------------------------------------------------------.
     * |BSp|  -|  0|  9|  8|  7|  6|  5|  4|  3|  2|  1|  =|     ` |
     * |-----------------------------------------------------------|
     * | Ent |  ;|  Y|  U|  L|  J|  G|  P|  F|  W|  Q|Esc|Cps|   \ |
     * |-----------------------------------------------------------|
     * |    ' |  O|  I|  E|  N|  H|  D|  T|  S|  R|  A|  '|  Enter |
     * |-----------------------------------------------------------|
     * | Shift  |  /|  .|  ,|  M|  K|  B|  V|  C|  X|  Z|    Shift |
     * `-----------------------------------------------------------'     
[/code]

You'll want an easily accessible key (such as a thumb key) to switch between normal and mirrored typing. One suggestion is using LAlt for left-handed typing, and RAlt or RWin for right-handed typing. But you may instead use a foot switch set to any other key, or a "ghetto foot switch" made by stripping most keys off a keyboard and placing it on the floor, for instance. A more fancy but still cheap foot switch could be made by soldering the wires from a foot pedal switch (if you have something useable) to the contacts of a key on a cheap keyboard. By default, the layer switch key in my files is Pause/Break which could be cannibalized this way.

Then, you may choose whether the switch key should be a normal Shift-type (switch) or a Caps-type (toggle) modifier. See how I've defined the "FPau" Fn key in my file; it's used as my definition for the Pause key but you can copy that to any other key as well. The normal way would be to set FPau to Shift/switch-type with "ACTION_LAYER_MOMENTARY(1)" (the 'PAUSBEHAVIOR 2' setting), and then replace the desired key in your active (layer0) layout with FPau if you wish to move it. If you go with a toggle modifier, you need to make that key transparent (TRNS) on the mirrored layout, or provide a similar toggle somewhere else or you won't be able to get back!

Tip: Sticky Shift and Ctrl could be useful for one-handed typing! See the STICKYMODS setting.


[h][4]    [u]Download and Setup[/u][/h]
[h][4.1]    DOWNLOAD AND INSTALL[/h]
There's a separate [b][url=https://forum.colemak.com/post/18407/#p18407]Download and Install[/url][/b] post below. It shows how to get and install my files, and also how to prepare the device in bootloader mode.

[h][4.2]    KEYMAP CONFIGURATION[/h]
There's a separate [b][url=https://forum.colemak.com/post/18410/#p18410]Keymap Configuration[/url][/b] post below. It shows how to get or tweak/make a HEX file that suits your layout needs.

[h][4.3]    DEVICE FLASHING[/h]
There's a separate [b][url=https://forum.colemak.com/post/18411/#p18411]Device Flashing[/url][/b] post below. It shows how to load a HEX file into your USB-2-USB device and get it ready for typing.


[h][4.4]    HARDWARE IMPLEMENTATIONS[/h]

I won't cover all possibilities here. I use Hasu's converters myself and haven't got any experience with others, but the possibilities are many.

A [url=https://geekhack.org/index.php?topic=80421]Pro Micro (such as the one seen above by GeekHack user Yangdigi)[/url] may be cheapest, but it also seems to be the most techy option?

Colemak forum user [url=https://forum.colemak.com/user/2108-darkness/]Darkness[/url] made a device and [url=https://github.com/darkytoothpaste/keymapper]his own code for it[/url], see [url=https://forum.colemak.com/viewtopic.php?id=1561]his "Arduino-based hardware keyboard remapper" topic[/url] for more info. Scroll down that page for pictures and a nice [url=https://forum.colemak.com/viewtopic.php?pid=11494#p11494]how-to sum-up post[/url]. He started off with an Arduino Leonardo like the one to the left in Yangdigi's image above; this can be a good development platform if you have one. But for a more useful implementation, he uses an Arduino Teensy 2.0 as seen below. Hasu has tried his TMK code on this device and it seems to be working fine.

    [img]https://www.dropbox.com/s/fv92oiy0idhyc7s/USB2USB_DarkyToothpaste_Teensy.JPG?raw=1[/img]
    [i]Darkness's Teensy-based USB-2-USB Converter (see [url=https://forum.colemak.com/viewtopic.php?id=1561]his topic[/url])[/i]

I'm really hoping that [b][url=https://www.kickstarter.com/projects/paulstoffregen/teensy-35-and-36/description]the upcoming Teensy 3.5/3.6[/url][/b] can be used for TMK! These devices are fast, have a [i]lot[/i] more Flash/RAM (512/192 kB for 3.5; 1024/256 kB for 3.6) and most importantly, come with a second USB intended for Host mode so it won't need a separate USB host! That may make it a cheap and powerful option; someone will hopefully test this soon.

The safest and easiest option may be to order the brilliant [b][url=https://geekhack.org/index.php?topic=69169.0]USB to USB Converter from GeekHack user Hasu[/url][/b], who has also developed the TMK software for converting keyboards to more awesome keyboards. I've got a few of these beauties, and my code, instructions and .hex definition files below are based on Hasu's device although they may be used for other devices too (may need some geeky tweaking).

    [img]https://www.dropbox.com/s/07rtiruwhuzyvee/USB2USB_Hasu-NJBair_GeekHack-topic74708_GadOE.jpg?raw=1[/img]
    [i]Hasu's [url=https://geekhack.org/index.php?topic=69169.0]USB to USB Converter for TMK Key mapping[/url] (original photo by [url=https://geekhack.org/index.php?topic=74708.0]Nick J Bair[/url])[/i]

    [img]https://www.dropbox.com/s/c779hkqj1autyu3/PS2USB_Hasu_GadOE.png?raw=1[/img]
    [i]Oh look, Hasu has other converters and keyboard controllers too! Here's a [b]PS/2-to-USB converter[/b] making my friend's vintage IBM Model M board awesome.[/i]


This topic won't show you any more about how to get your own QUICKIE USB-2-USB device. From my own experience I can heartily recommend Hasu's products, but find out what works for you. Best of luck, either way!


[h]LINKS:[/h]
[u][i]@GeekHack:[/i][/u]
[b][url=https://geekhack.org/index.php?topic=69169]Hasu's USB to USB converter topic[/url][/b] and [url=https://geekhack.org/index.php?topic=72052.0]Hasu's converter buying topic[/url]
[url=https://geekhack.org/index.php?topic=41989.0]Hasu's TMK topic[/url] (code basis for keyboard controllers/converters in general)
[url=https://geekhack.org/index.php?topic=74708.0]NJBair's review of Hasu's USB-2-USB converter[/url], with [url=https://geekhack.org/index.php?topic=74708.msg2149453#msg2149453]a nice FLIP guide[/url]
[url=https://geekhack.org/index.php?topic=80421]YangDigi's Pro Micro DIY converter topic[/url] (some Teensy info too)

[u][i]@GitHub:[/i][/u]
[b][url=https://github.com/tmk/tmk_keyboard]Hasu's GitHub TMK repository[/url][/b], and its [url=https://github.com/tmk/tmk_keyboard/tree/master/converter/usb_usb/]USB-2-USB section[/url]
[url=https://github.com/tmk/tmk_keyboard/wiki/FAQ-Build]Hasu's Build FAQ[/url], [url=https://github.com/tmk/tmk_keyboard/blob/master/tmk_core/doc/build.md]Build README[/url] and [url=https://github.com/tmk/tmk_keyboard/blob/master/tmk_core/doc/keymap.md]keymap README[/url]
[url=https://github.com/njbair/keyboard_firmware#building--flashing-the-firmware]NJBair's repository[/url] including some build/flash info
[url=https://github.com/tmk/tmk_keyboard/wiki]Hasu's TMK Keyboard Wiki[/url] with much useful info

[u][i]@TMK_site:[/i][/u]
[b][url=http://www.tmk-kbd.com/tmk_keyboard/editor/usb_usb/index.html]Hasu's Online TMK Keymap Editor for the USB to USB converter[/url][/b]

[u][i]@Colemak:[/i][/u]
[url=https://forum.colemak.com/topic/1561-arduinobased-hardware-keyboard-remapper/]Darkness' Arduino-based hardware keyboard remapper topic[/url]

[u][i]@QMK:[/i][/u]
[b][url=http://qmk.fm/]QMK (Quantum Mechanical Keyboard)[/url][/b] is a TMK-fork-gone-solo that deserves honorable mention
[url=https://github.com/jackhumbert/qmk_firmware]The GitHub QMK repository[/url]  (I don't use QMK myself, but it has a lot of documentation and more)


[h]DONE:[/h]
• Now witness the typing power of this fully operational USB-2-USB device! Happy hacking, brave and adventurous souls! ;-)
• 2018-01: Added a user function that allows for input of Unicode glyphs not in the layout using the AltGr(RAlt) modifier.
• 2018-02: More advanced modifiers for Extend2+. Hold down, e.g., RShift then Caps (then release RShift) for Extend2. Can't use Alt keys (yet) on Win.


[h]TODO:[/h]
• Extend modifiers don't always stack? Caps+S+T+N didn't produce Ctrl+Shift+Left but ST keystrokes for me once; others have had no such problems.
• Extend3–4? Would it be possible to implement some shortstrings at least? Memory limitations may preclude this for now.
• Use the ScrollLock LED to show whether the second layout is active?


    [img]https://www.dropbox.com/s/ybzpmj95jky3vtl/Cmk-CAW_Unicomp_DreymaR_TN-Ninja_2017-08.png?raw=1[/img]
    [i]My Unicomp SpaceSaver Buckling Spring (IBM Model M ISO type) keyboard with "American Ninja" caps, splendidly sporting the Colemak-CAW layout.[/i]