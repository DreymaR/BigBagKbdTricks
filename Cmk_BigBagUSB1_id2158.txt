[h]DREYMAR'S (USB): DreymaR's Extensive Yet Modular ARSenal (for QUICKIE USB-2-USB devices)[/h]

This topic is the younger sister topic of the [b][url=https://forum.colemak.com/viewtopic.php?id=1438]Bag Of Tricks for XKB on Linux[/url][/b] (the main one) and [b][url=https://forum.colemak.com/viewtopic.php?id=1467]Bag Of Tricks for PKL on Windows[/url][/b]. It covers many of the same improvements, but see the other two topics for more info and explanations of what the tricks are for.

This post explains what a [b]QUICKIE USB-2-USB device[/b] is, and what I've managed to implement on [b][url=https://geekhack.org/index.php?topic=69169.0]Hasu's USB to USB keyboard converter[/url][/b] using his [b][url=https://github.com/tmk/tmk_keyboard]TMK Keyboard Firmware Collection[/url][/b] toolkit. If you're eager to get started before reading the details, you may jump directly to the [b][url=https://forum.colemak.com/post/18407/#p18407]Download and Install[/url][/b], [b][url=https://forum.colemak.com/post/18410/#p18410]Keymap Configuration[/url][/b] and [b][url=https://forum.colemak.com/post/18411/#p18411]Device Flashing[/url][/b] posts below.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/usb/doc/USB2USB-x3_YangDigi_GeekHack-Topic80421_GadOE.jpg[/img]
    [i][url=https://geekhack.org/index.php?topic=80421]GeekHack user yangdigi[/url]'s comparison of USB-2-USB devices: Arduino Leonardo-type, Hasu's device and his own Pro Micro device.
    Scale: Hasu's device is about 6 cm (2") long.[/i]

Look at those beauties, heh. I've decided to call this kind of device a [b]QUICKIE[/b] (QWERTY USB In, Colemak Key Input Emulated)! ;-) More proper names are "[b]USB-2-USB[/b]" or "[b]USB to USB converter[/b]" device, as you may of course use it for non-Colemak layouts (and as my name is silly).

This non-OS-specific solution doesn't have the full power of layout installs, but it's very interesting. A USB-to-USB device that plugs between the keyboard and whatever you're connecting your keyboard to, provides an XKB/Win/Mac/what-have-you independent solution that can accommodate many of my tricks! For people having to deal with zealous IT security rules, this may be the only solution short of getting an expensive remappable keyboard. It could let you type Colemak to, say, a PlayStation or other device where you can't control the layout directly. And it could be fun to make one yourself if you're adventurous and DIY oriented!

The common solution is a microcontroller (such as Atmel's AtMega32 chips; Arduino Teensy 2+ or Pro Micro are good choices) with USB, coupled with a USB Host "shield" (separate little PCB) that lets you plug your keyboard into it. It'll mount itself as a HID keyboard, that is, a run-of-the-mill USB keyboard that almost any device accepts.

There are several possible ways of programming a USB-2-USB device. Essentially you have to:
[b]1)[/b] Connect the device in [b]Bootloader[/b] mode which means it can be programmed
[b]2)[/b] Get some code and compile it for the device, or use a pre-compiled [b]HEX[/b] file. There's even an online layout designer for a less techy option.
[b]3)[/b] [b]Flash[/b] the .hex file to the device's static memory
[b]4)[/b] [b]Reset[/b] the device (or just unplug and replug it) to reactivate application mode so it works


[h]Notable hardware implementations[/h]

A [url=https://geekhack.org/index.php?topic=80421]Pro Micro (such as the one seen above by GeekHack user Yangdigi)[/url] may be cheapest, but it also seems to be the most techy option?

Colemak forum user [url=https://forum.colemak.com/user/2108-darkness/]Darkness[/url] made a device and [url=https://github.com/darkytoothpaste/keymapper]his own code for it[/url], see [url=https://forum.colemak.com/viewtopic.php?id=1561]his "Arduino-based hardware keyboard remapper" topic[/url] for more info. Scroll down that page for pictures and a nice [url=https://forum.colemak.com/viewtopic.php?pid=11494#p11494]how-to sum-up post[/url]. He started off with an Arduino Leonardo like the one to the left in Yangdigi's image above; this can be a good development platform if you have one. But for a more useful implementation, he uses an Arduino Teensy 2.0 as seen below.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/usb/doc/USB2USB_DarkyToothpaste_Teensy.JPG[/img]
    [i]Darkness's Teensy-based USB-2-USB Converter (see [url=https://forum.colemak.com/viewtopic.php?id=1561]his topic[/url])[/i]

The safest and easiest option may be to order the brilliant [b][url=https://geekhack.org/index.php?topic=69169.0]USB to USB Converter from GeekHack user Hasu[/url][/b], who has also developed the TMK software for converting keyboards to more awesome keyboards. I've got a few of these beauties, and my code, instructions and .hex definition files below are based on Hasu's device although they may be used for other devices too (may need some geeky tweaking).

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/usb/doc/USB2USB_Hasu-NJBair_GeekHack-topic74708_GadOE.jpg[/img]
    [i]Hasu's [url=https://geekhack.org/index.php?topic=69169.0]USB to USB Converter for TMK Key mapping[/url] (original photo by [url=https://geekhack.org/index.php?topic=74708.0]Nick J Bair[/url])[/i]

This topic won't show you any more about how to get your own QUICKIE USB-2-USB device. From my own experience I can heartily recommend Hasu's products, but find out what works for you. Best of luck, either way!


[h]DREYMAR'S BIG BAG OF TRICKS for QUICKIE USB-2-USB devices:[/h]

[b]        [u]Character/Key Mapping Layers:[/u][/b]
[b][1.1][/b] (A note about AltGr and dead key mappings such as Colemak[eD])
[b][1.2][/b] [b][url=https://forum.colemak.com/viewtopic.php?id=2014]Extend layers[/url][/b] using Caps Lock (and Tab) as switch modifier(s) for navigation/editing/browsing/etc from near the home position

[b]        [u]Ergonomic Key Remappings:[/u][/b]
[b][2.1][/b] [b]Angle/Wide ergo modifications[/b] to improve wrist angles, hand spacing and right pinky stretch/load effort
[b][2.2][/b] [b]Colemak "[url=https://forum.colemak.com/viewtopic.php?pid=16151#p16151]Curl-DH[/url]" ergo mods[/b] (deprioritize middle columns without keys changing fingers)

[b]        [u]Locale Layouts:[/u][/b]
[b][3.1][/b] (Locale and phonetic layouts)

[b]        [u]Other Keyboard Tricks:[/u][/b]
[b][4.1][/b] [b][url=https://forum.colemak.com/viewtopic.php?id=1858]Tarmak[/url] transitional Colemak[/b] layouts for learning Colemak in smaller steps if so desired
[b][4.2][/b] [b]Mirrored Colemak[/b] that allows one-handed typing (if you ever break an arm...!)

[b]        [u]Download and Install:[/u][/b]
[b][5.1][/b] [b][url=https://forum.colemak.com/post/18407/#p18407]Download and Install[/url][/b] (separate post)
[b][5.2][/b] [b][url=https://forum.colemak.com/post/18410/#p18410]Keymap Configuration[/url][/b] (––––"––––)
[b][5.3][/b] [b][url=https://forum.colemak.com/post/18411/#p18411]Device Flashing[/url][/b] (––––"––––)

[b][–.–][/b] [b]Links/Done/Todo[/b]

An advantage with my TMK-based implementation is that you can pick and choose most of the enhancements as modules:
• The AngleWide mods are keymap types so they work with any layout you choose, including QWERTY or Dvorak
• The Extend layers and switch keys are options that should work with nearly any existing layout
• The Curl mods for Colemak layouts use a separate switch setting
• Locale/phonetic, Mirrored and Tarmak options are separate layouts (though not all are implemented yet).
Freedom of choice through [b]modularity[/b] is an ideal in the DreymaR world, as it is in Linux. :-)


[s][h][1.1]    COLEMAK[eD] - EDITION DREYMAR[/h][/s]

[b]Note:[/b] A USB-2-USB device remaps only key strokes, not character input events. So key mods like layout and ergo remappings are possible, but not mods that send glyphs. Your dead keys and AltGr mappings will work as they do without the device, and you may only move their keys around as they are.

Sorry, but glyph mappings such as the powerful Colemak[eD] below are totally up to the active layout on the machine you're typing to.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/Cmk-ISO-eD-No-CurlAWide_90d_FShui.png[/img]
    [i]Fig.: Colemak-CAW[eD], showing the Norwegian 'us' variant on an ISO board with the Curl(DbgHk)Angle and Wide(Slash) ergonomic mods (see below).[/i]


[h][1.2]    EXTEND LAYERS AND THE CAPS SWITCH MODIFIER[/h]

This is my favorite mod next to Colemak itself! The ability to navigate and edit from the home position and its immediate surroundings is extremely powerful. It's like having part of the power of advanced editors like Vim ready in all situations. Plus a fully functional multimedia keyboard without sacrificing compactness.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/extend/Extend-ISO-NoWi-Linux_90d.png[/img]
    [i]A symbolic chart of my Extend mappings (lvl1 only). Greens, navigation; blue/circled, mousing; orange, multimedia; gray, system/misc.[/i]

The USB-2-USB implementation is almost the same as the Linux/XKB and Windows/PKL ones. Some advanced media key codes such as Brightness controls are missing for now (as I didn't find their key codes in TMK). How some of the advanced keys like MouseWheel Left/Right are interpreted is still up to the OS.

[code]
    /* Layer 5: Extend1 (DreymaR)                                                      */
    /* ,----.    ,-------------------. ,-------------------. ,-------------------.
     * |Caps|    |MPly|MPrv|MNxt|MStp| |Mute|VolD|VolU|MSel| |WHom|WSch|MyCm|Calc|
     * `----'    `-------------------' `-------------------' `-------------------'
     * ,-------------------------------------------------------------------------.
     * | ?? | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10| F11| F12|  Pause |
     * |-------------------------------------------------------------------------|
     * |      |Esc |Wh_U|WBak|WFwd|Ms_U|PgUp|Home| Up |End |Del |Esc |Ins |  App |
     * |-------------------------------------------------------------------------|
     * |*Ext1* |Alt |Wh_D|Shft|Ctrl|Ms_D|PgDn|Left|Down|Rght|BSpc|App |WFav|PScr |
     * |-------------------------------------------------------------------------|
     * |     |Wh_L| ^Z | ^X | ^C | ^V |Btn1|Btn2|Btn3|Ms_L|Ms_R|Wh_R|            |
     * |-------------------------------------------------------------------------|
     * |      |     |Ext1 |           Return            |     |     |     |      |
     * `-------------------------------------------------------------------------'     */
[/code]
[code]
    /* Layer 6: Extend2 (DreymaR)                                                      */
    /* ,----.    ,-------------------. ,-------------------. ,-------------------.
     * |    |    |MPau|MRwd|MFFd|Ejct| |WRef|BriD|BriU|Slep| |www |Mail|App3|App4|
     * `----'    `-------------------' `-------------------' `-------------------'
     * ,-------------------------------------------------------------------------.
     * |    | !  | @  | #  | $  | %  | ^  | P7 | P8 | P9 | P* | P- | =  |        |
     * |-------------------------------------------------------------------------|
     * |      |Home| Up |End |Del |Esc |PgUp| P4 | P5 | P6 | P+ |    |    |      |
     * |-------------------------------------------------------------------------|
     * |*Ext2* |Left|Down|Rght|BSpc|NLck|PgDn| P1 | P2 | P3 |PEnt|    |    |     |
     * |-------------------------------------------------------------------------|
     * |     |    | ^Z | ^X | ^C | ^V |Btn1| ,  | P0 | P0 | P. | P/ |            |
     * |-------------------------------------------------------------------------|
     * |      |     |     |                             |Ext2 |     |     |      |
     * `-------------------------------------------------------------------------'     */
[/code]

To use the Extend layers, make sure the EXTENDMODE constant is defined to 1. This'll make CapsLock the Extend1 modifier (overriding CAPSBEHAVIOR).

For now, the Extend2 modifier is the Tab key (and not the Alt+Caps combo I'd like). Tapping that key instead produces a normal key stroke. Be aware that this key behavior ruins auto-repeat for the key – I think that's an acceptable tradeoff for Tab. You may change it to another key but it's a little technical; see the [b][url=https://forum.colemak.com/post/18410/#p18410]Configuration[/url][/b] post below.

For the NumPad layer, remember that the NumLock state influences what you get. There's a NumLock key easily accessible in the layer.

[b]NOTE: Stacking Extend modifiers didn't work for me.[/b] Instead of Ctrl+Shift+Left, pressing Caps+S+T+N gave me ST key strokes. This may be a hardware or TMK limitation. Oddly enough, it works with either physical Shift plus Extend-Ctrl as well as physical RCtrl plus Extend-Shift (e.g., Shift+Caps+T+N or Caps+RCtrl+S+N work) but not with physical LCtrl.


[h][2.1]    THE ANGLE/WIDE ERGONOMIC KEYBOARD MODEL MODS[/h]

These are ergonomic mods, moving some keys around to achieve straight wrists (the Angle mods), as well as better hand separation and right pinky load (the Wide mods). The Angle part is almost a no-brainer to me as it allows the left hand to keep a straight wrist without changing the fingering on ZXCV, and makes B easier to reach. [url=https://forum.colemak.com/profile.php?id=2]Shai Coleman[/url] himself has given his "blessing" to this mod! The Wide mod is more optional, but it does put some load off the right-hand pinky, widen the arm distance (useful for small keyboards in particular, but nice regardless), and provide easier access to AltGr/Enter/Backspace/RShift.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/ergomods/Cmk-ISO-AWide-35_60d_FShui.png[/img]
    [i]The AngleWide-Slash wide ergo mod for PC105/ISO keyboards.[/i]

I've implemented the ZXCVB_ 'Angle' shift for ISO keyboards both separately and as part of the AngleWide(Slash) mod that I use myself. For ANSI boards I've made an implementation of the 'Angle(Z)' shift (moving the Z key to the middle) and a [url=https://forum.colemak.com/viewtopic.php?pid=12302#p12302]Wide(Quote) mod[/url] as well as the combination of these. Also the 'A-Wing' mod to get the Angle and right pinky benefits without messing with the Z position (but at other costs).

     [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/ergomods/Cmk-ANSI-AWide-ZQu_60d_FShui.png[/img]
     [i]The Angle(Z)Wide ergo mod for PC104/ANSI keyboards[/i]

     [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/ergomods/Cmk-ANSI-AFrame_60d_FShui.png[/img]
     [i]The "A-Wing" ergo mod for PC104/ANSI keyboards[/i]

Using one of these requires a little search-and-replace in the keymap_dreymar.c file before compiling:
[code]
/* Search-replace 'KEYMAP_AWIDEISO' in this file to use ergonomic keyboard mods:
 * _ALL      - The default keymap format for all keyboard types
 * _ANGLEISO - ISO/Int Angle ergo mod
 * _AWIDEISO - ISO/Int Angle-Wide(/) ergo mod
 * _ANGZANSI - ANSI/US Angle(Z) ergo mod
 * _ANGZWIDE - ANSI/US Angle(Z)-Wide(') ergo mod
 * _ANGLWING - ANSI/US A-Wing ergo mod
[/code]

The actual keymap types are in the keymap_common_dreymar.h file and they're hard to edit manually.


[h][2.2]    THE "CURL-DH" COLEMAK ERGO MODS[/h]

The Curl/DH ergo mods make the home "row" curl like a relaxed hand does instead of forcing it to a straight line as was commonly thought best some years ago. This is achieved by moving the common D and H from their debated "middle trench" positions to more comfortable lower-row positions, while preserving the key-to-finger mappings of vanilla Colemak.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/tarmak/Tarmak-Curl_Spectral-45d/Tarmak-Curl6_Spectral_Cmk.png[/img]
    [i]The Colemak Curl(DbgHk)Angle ergo modded layout.[/i]

The two main variants are stevep99's Dvbg/Hm mod which basically swaps the D/H and Colemak(Angle) V/M positions, and my Dbg/Hk mod which instead swaps with the Colemak B/K positions. Mine is less radical/intrusive as it doesn't move the V and M keys to avoid confusion; Steve's is certainly better if you have a non-staggered matrix board and you may also simply happen to prefer the V/M positions over the B/K ones depending on your hands and preferences.

This mod depends on using the Angle mod which is easier on an "102/105-key" ISO keyboard but as seen above there are decent options for US/ANSI boards too. If you want to learn this using the Tarmak progression (described in 4.1), that's possible too! You just have to learn the Angle mod early on, and [url=https://forum.colemak.com/viewtopic.php?pid=16393#p16393]tweak the 2nd Tarmak step a little[/url]. For my variant, the right-hand mod (Hk) should ideally be learnt with the first step because that moves K, but for SteveP99's variant the switch (Hm) may be learnt whenever you feel like it as it's separate from the rest of the layout from Tarmak1 onwards. I've postponed it to the last step, but feel free to edit the layout file and compile whatever you like.

To use Curl mods with my TMK files, there's a preprocessor switch named CURLMOD:
[code]
 * The CURLMOD options for Colemak/Tarmak layouts are:
 * 0: No Curl - vanilla Colemak
 * 1: DreymaR's DbgHk ergo mod, bringing the common DH keys from the middle "trench" to the QWERTY VN keys
 * 2: SteveP99's DvbgHm ergo mod, bringing the DH keys inwards to the CM keys
...
#define CURLMOD 1
[/code]

This switch only affects the four Tarmak layouts and Colemak. Make sure you use an Angle or AngleWide keymap type with it (optional for Tarmak1).


[h][3.1]    LOCALE AND PHONETIC VARIANTS[/h]

The QUICKIE doesn't support locales [i]per se[/i], as it only sends key strokes and these are re-coded by your computer's layout settings. However, users with locale layouts installed may find that the default symbol key mappings are non-intuitive since they may be quite different from the US ones. So I've made a "hack" layout for myself that moves several symbol keys to where I feel they are more naturally placed.

For instance, instead of a [=+] key as on US keyboards, the Norwegian locale has [+?], [0=] etc. I can't sort that out to get the symbol placements I'm used to as a Colemak[eD] typist unless I choose a US locale layout on the computer I'm on – but I still need the Norwegian ÆØÅ letters so that won't work! I had to settle for, e.g., moving the +? key to the US /? key position so at least the question mark is in the right place. Not perfect, but the best I can do.

Phonetic layouts for non-latin scripts require a layout with that script installed on the computer or whatever you're typing to. If you select a QWERTY phonetic layout for a script and have a USB-2-USB Colemak keymap active, your resulting layout will be Colemak phonetic. If, however, you want to swap some key positions (for Rulemak/Bulmak for instance), a suitable new keymap must be made and compiled.


[h][4.1]    THE TARMAK TRANSITIONAL COLEMAK LAYOUTS[/h]

There's [url=https://forum.colemak.com/viewtopic.php?id=1858]a main forum topic on this[/url] that you may want to read. Basically, I've added four Tarmak layouts that provide stepping stones from the standard (US) English QWERTY layout to the Colemak[eD] layout by moving only 3-4 keys per step. Each step brings at least one important key to the home row (notably, E-T-R-O-I) and only the uncommon J is misplaced in the process.

Note that you can learn both vanilla Colemak and Curl-DH modded Colemak (see above) with Tarmak progressions. And they work modularly with AngleWide mods.

    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/Tarmak/Tarmak_Spectral_ETROI.png[/img]
    [i]The 5-step Tarmak(ETROI) transitional Colemak layouts, spectrally color-coded from red (Tarmak1) to violet (Colemak).[/i]


[h][4.2]    MIRRORED COLEMAK[/h]

Advanced typing is possible with only one hand given a modicum of familiarity with the mirroring method. In fact, this paragraph was written entirely using the left hand with the exception of the mirroring key itself, with hardly any training! The brain is inherently good at mirroring things.

Mirrored layouts are easily implementable for the USB-2-USB device. I haven't done so yet, but if you need one then give me a holler.


[h][5.1]    DOWNLOAD AND INSTALL[/h]

There's a separate [b][url=https://forum.colemak.com/post/18407/#p18407]Download and Install[/url][/b] post below. It shows how to get and install my files, and also how to prepare the device in bootloader mode.

[h][5.2]    KEYMAP CONFIGURATION[/h]

There's a separate [b][url=https://forum.colemak.com/post/18410/#p18410]Keymap Configuration[/url][/b] post below. It shows how to get or tweak/make a HEX file that suits your layout needs.

[h][5.3]    DEVICE FLASHING[/h]

There's a separate [b][url=https://forum.colemak.com/post/18411/#p18411]Device Flashing[/url][/b] post below. It shows how to load a HEX file into your USB-2-USB device and get it ready for typing.


[h]LINKS:[/h]
[u][i]@GeekHack:[/i][/u]
[b][url=https://geekhack.org/index.php?topic=69169]Hasu's USB to USB converter topic[/url][/b] and [url=https://geekhack.org/index.php?topic=72052.0]Hasu's converter buying topic[/url]
[url=https://geekhack.org/index.php?topic=41989.0]Hasu's TMK topic[/url] (code basis for keyboard controllers/converters in general)
[url=https://geekhack.org/index.php?topic=74708.0]NJBair's review of Hasu's USB-2-USB converter[/url], with [url=https://geekhack.org/index.php?topic=74708.msg2149453#msg2149453]a nice FLIP guide[/url]
[url=https://geekhack.org/index.php?topic=80421]YangDigi's Pro Micro DIY converter topic[/url] (some Teensy info too)

[u][i]@GitHub:[/i][/u]
[b][url=https://github.com/tmk/tmk_keyboard]Hasu's GitHub TMK repository[/url][/b], and its [url=https://github.com/tmk/tmk_keyboard/tree/master/converter/usb_usb/]USB-2-USB section[/url]
[url=https://github.com/tmk/tmk_keyboard/wiki/FAQ-Build]Hasu's Build FAQ[/url], [url=https://github.com/tmk/tmk_keyboard/blob/master/tmk_core/doc/build.md]Build README[/url] and [url=https://github.com/tmk/tmk_keyboard/blob/master/tmk_core/doc/keymap.md]keymap README[/url]
[url=https://github.com/njbair/keyboard_firmware#building--flashing-the-firmware]NJBair's repository[/url] including some build/flash info
[url=https://github.com/tmk/tmk_keyboard/wiki]Hasu's TMK Keyboard Wiki[/url] with much useful info

[u][i]@TMK_site:[/i][/u]
[b][url=http://www.tmk-kbd.com/tmk_keyboard/editor/usb_usb/index.html]Hasu's Online TMK Keymap Editor for the USB to USB converter[/url][/b]

[u][i]@Colemak:[/i][/u]
[url=https://forum.colemak.com/topic/1561-arduinobased-hardware-keyboard-remapper/]Darkness' Arduino-based hardware keyboard remapper topic[/url].


[h]DONE:[/h]
• Now witness the typing power of this fully operational USB-2-USB device!
• Hope you like it! And ... happy USB-2-USB hacking, brave and adventurous souls! ;-)


[h]TODO:[/h]
• Extend modifiers don't stack: Caps+S+T+N doesn't produce Ctrl+Shift+Left but ST keystrokes.
• More advanced modifiers for Extend2+. For now, I'm using <TAB> or <LSGT>/VK_102 as a hold-modifier/tap-keypress key.
• Extend3–4? Would it be possible to implement some shortstrings at least? Memory considerations may preclude this.


    [img]https://dl.dropboxusercontent.com/u/14504410/Keyboards/dreymar/doc/hardware/Colemak-CAW_Unicomp_DreymaR.jpg[/img]
    [i]My Unicomp SpaceSaver Buckling Spring (IBM Model M type) ISO keyboard with "American Ninja" caps, splendidly sporting the Colemak-CAW layout.[/i]